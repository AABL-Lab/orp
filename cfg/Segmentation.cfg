#!/usr/bin/env python
#
# Copyright (c) 2016, Adam Allevato
# Copyright (c) 2017, The University of Texas at Austin
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Dynamic reconfigure configuration for the segmenter node. These parameters
are passed on to the node so it can configure itself accordingly.
"""

PACKAGE = "orp"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
##############################################################################
# function signature:
# gen.add("name", type(double_t|bool_t|int_t), 0, desc, default, min, max)

# SPATIAL BOUNDS
gen.add("spatial_min_x", double_t, 0, "Left edge of bounding box", -5, -5, 5)
gen.add("spatial_max_x", double_t, 0, "Right edge of bounding box", 5, -5, 5)
gen.add("spatial_min_y", double_t, 0, "Top face of bounding box", -0.4, -5, 5)
gen.add("spatial_max_y", double_t, 0, "Bottom face of bounding box",
        0.4, -5, 5)
gen.add("spatial_min_z", double_t, 0, "Front face of bounding box",
        -10, -10, 10)
gen.add("spatial_max_z", double_t, 0, "Back face of bounding box", 10, -10, 10)

gen.add("max_clusters", int_t, 0, "Maximum clusters to publish",10, 0, 100)

# WHICH CLOUDS TO PUBLISH
gen.add("publishBoundedScene", bool_t, 0,
        "Publish cloud to /bounded_scene after spatial clipping", True)
gen.add("publishVoxelScene", bool_t, 0,
        "Publish cloud to /voxel_scene after voxel grid is applied", False)
#gen.add("publishLargestPlane", bool_t, 0,
#        "Publish cloud to /largest_plane of the largest plane detected",
#        False)
gen.add("publishAllPlanes", bool_t, 0,
        "Publish cloud to /all_planes of all planes detected",  False)
gen.add("publishLargestObject", bool_t, 0,
        "Publish cloud to /largest_objects of the largest object detected",
        True)
gen.add("publishAllObjects", bool_t, 0,
        "Publish cloud to /all_objects of all objects after plane removal",
        True)

# SEGMENTATION
gen.add("max_plane_segmentation_iterations", int_t,    0, "", 50, 1, 1000)
gen.add("segmentation_distance_threshold", double_t, 0, "", 0.01, 0.0001, 0.5)
gen.add("percentage_to_analyze", double_t, 0, "", 0.2, 0, 1.0)

# FILTERING
gen.add("voxel_leaf_size", double_t, 0, "", 0.005, 0.0001, 0.05)

# CLUSTERING
gen.add("cluster_tolerance", double_t, 0,
        "distance between points in a cluster", 0.03, 0, 0.1)
gen.add("min_cluster_size", int_t,    0, "min number of points in cluster",
        300, 0, 5000)
gen.add("max_cluster_size", int_t,    0, "max number of points in cluster",
        2000, 0, 100000)

##############################################################################

exit(gen.generate(PACKAGE, "orp", "Segmentation"))
