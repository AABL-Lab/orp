<!--
Copyright (c) 2015, Adam Allevato
Copyright (c) 2017, The University of Texas at Austin
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<launch>
  <arg name="home_dir"        default="$(find orp)" />
  <arg name="data_folder"     default="data/train"/>
  
  <!-- GET DATA -->
  <include file="$(find freenect_launch)/launch/freenect.launch"> </include>

  <!-- SCENE SETUP -->
  <node
    name    = "static_transform_publisher"  
    pkg     = "orp"
    type    = "camera_tf_publisher.py"

    respawn = "true"
    output  = "screen"
  />

  <node
    name = "$(anon train_max_x)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_max_x 0.3"
  />

  <node
    name = "$(anon train_min_x)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_min_x -0.3"
  />
  <node
    name = "$(anon train_max_y)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_max_y 0.2"
  />

  <node
    name = "$(anon train_min_y)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_min_y -0.2"
  />
  <node
    name = "$(anon train_max_z)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_max_z 3.0"
  />

  <node
    name = "$(anon train_min_z)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation spatial_min_z 0.1"
  />

  <node
    name = "$(anon train_percentage)" respawn = "false"
    pkg  = "dynamic_reconfigure" type    = "dynparam"
    args = "set segmentation percentage_to_analyze 0.75"
  />

  <!-- PAN TABLE -->
  <node
    name="arduino_interface"
    pkg="rosserial_python"
    type="serial_node.py"
    args="/dev/ttyACM0" 
    
    output="screen"
    respawn="true"
  />

  <!-- FIDUCIALS -->
  
  <arg name="marker_size" default="4.4" />
  <arg name="max_new_marker_error" default="0.08" />
  <arg name="max_track_error" default="0.2" />

  <arg name="cam_image_topic" default="/camera/depth_registered/points" />
  <arg name="cam_info_topic" default="/camera/rgb/camera_info" />    
  <arg name="output_frame" default="/camera_link" />

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkers" respawn="false" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" />

  <!-- ORP -->
  <node
    name="segmentation"
    pkg="orp"
    type="segmentation"
    args=""

    respawn="true"
    output="screen"
  />
  <node
    name="histogram_saver"
    pkg="orp"
    type="histogram_saver"
    args="$(arg home_dir)/$(arg data_folder)"

    respawn="true"
    output="screen"
  />
  <node
    name="pan_data_collector"
    pkg="orp"
    type="pan_data_collector"
    args=""

    respawn="true"
    output="screen"
  />

  <!-- CONFIG AND VIZ -->
  <node
    name    = "rqt_reconfigure"
    pkg     = "rqt_reconfigure"
    type    = "rqt_reconfigure"
    args    = ""

    respawn = "false"
    output  = "screen"
  />

  <node
    name    = "rviz"
    pkg     = "rviz"
    type    = "rviz"
    args    = "-s $(arg home_dir)/rviz/splash.png"

    respawn = "false"
    output  = "screen"
  />

  <node
    name    = "dynparam"
    pkg     = "dynamic_reconfigure"
    type    = "dynparam"
    args    = "set camera/driver depth_registration true"

    respawn = "false"
    output  = "screen"
  />
</launch>
