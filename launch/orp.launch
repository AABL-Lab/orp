<!--
Copyright (c) 2015, Adam Allevato
Copyright (c) 2017, The University of Texas at Austin
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<launch>
  <arg name="recognition_frame"   default="world" />

  <arg name="openni"              default="false"/>
  <arg name="openni2"             default="false"/>
  <arg name="realsense"           default="false"/>
  <!-- calibration files used for OpenNI2 -->
  <arg name="rgb_calib_url"       default="" />
  <arg name="depth_calib_url"     default="" />

  <!-- use to allow custom camera names -->
  <arg name="camera"              default="camera" />

  <arg name="autostart"           default="true"/>
  <arg name="reconfigure"         default="true"/>
  <arg name="sim"                 default="false"/>
  <arg name="legacy"              default="false"/>
  <arg name="rviz"                default="false"/>
  <arg name="rviz_file"           default="$(find orp)/cfg/recognition.rviz" />

  <arg name="sixdof"              default="false"/>
  <arg name="rgb"                 default="false"/>
  <arg name="segmentation_server" default="true" />

  <arg name="throttle_nodelet"    default="100" />
  <arg name="camera_topic"        default="/camera/depth_registered/points" />

  <!-- CAMERA NODES -->
  <group unless="$(arg sim)">
    <include if="$(arg openni)" file="$(find openni_launch)/launch/openni.launch"> </include>
    <include if="$(arg openni2)" file="$(find openni2_launch)/launch/openni2.launch">
      <arg name="rgb_camera_info_url" value="$(arg rgb_calib_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_calib_url)" />
    </include>
    <include if="$(arg realsense)" file="$(find realsense_camera)/launch/realsense_rviz.launch"> </include>\
  </group>

  <!-- PUBLISH FRAMES IF THEY AREN'T BEING PUBLISHED BY CAMERA DRIVERS -->
  <include if="$(arg sim)"
     file="$(find rgbd_launch)/launch/kinect_frames.launch">
    <arg name="camera" value="$(arg camera)" />
  </include>
  <remap if="$(arg sim)" from="/camera/depth_registered/points" to="/cloud_pcd" />
  <remap from="/camera/depth_registered/points" to="$(arg camera_topic)" />

  <!--<node name="throttle_nodelet" pkg="orp" type="throttle_nodelet.sh" args="$(arg throttle_nodelet)"/> -->

  <group ns="orp">
    <!-- CLASSIFICATION -->
    <node
      if      = "$(arg segmentation_server)"
      name    = "segmentation"
      pkg     = "orp"
      type    = "segmentation"
      args    = ""

      respawn = "true"
      output  = "screen"
    >
      <param name="clippingFrame" value="$(arg recognition_frame)"/>
    </node>

    <node
      if      = "$(arg sixdof)"
      name    = "sixdof_classifier"
      pkg     = "orp"
      type    = "sixdof_classifier"
      args    = ""

      respawn = "true"
      output  = "screen"
    >
      <param name="autostart" type="bool" value="$(arg autostart)"/>
    </node>

    <node
      if      = "$(arg rgb)"
      name    = "rgb_classifier"
      pkg     = "orp"
      type    = "rgb_classifier"
      args    = ""

      respawn = "true"
      output  = "screen"
    >
      <param name="autostart" type="bool" value="$(arg autostart)"/>
    </node>

    <!-- Main recognition node, which interprets and combines results
         from (possibly several different) classifiers. -->
    <node
      name    = "recognizer"
      pkg     = "orp"
      type    = "recognizer"
      output  = "screen"
      respawn = "true"
    >
      <param name="recognition_frame" value="$(arg recognition_frame)"/>
      <param name="autostart" type="bool" value="$(arg autostart)"/>
      <param name="legacy" type="bool" value="$(arg legacy)"/>
    </node>

    <!-- VISUALIZATION AND CONFIGURATION -->
    <node
      if      = "$(arg reconfigure)"
      name    = "rqt_reconfigure"
      pkg     = "rqt_reconfigure"
      type    = "rqt_reconfigure"
      args    = ""

      respawn = "false"
    />
  </group>

  <node
    if      = "$(arg rviz)"
    name    = "rviz"
    pkg     = "rviz"
    type    = "rviz"
    args    = "-d $(arg rviz_file) -s $(find orp)/rviz/splash.png"

    respawn = "false"
    output  = "screen"
  />

  <rosparam command="load" file="$(find orp)/cfg/default.yaml" />
</launch>
